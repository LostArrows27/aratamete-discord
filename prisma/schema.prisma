datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id        String    @id @default(uuid())
  userID    String    @unique
  name      String
  imageUrl  String    @db.Text
  email     String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Server    Server[]
  // a person can be a member of many servers
  members   Member[]
  channels  Channel[]
}

// server in discord
model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @db.Text

  profileID String
  profile   Profile @relation(fields: [profileID], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // 1 server have many members and channel 
  members   Member[]
  channels  Channel[]

  @@index([profileID])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

// member in a server
model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileID String
  profile   Profile @relation(fields: [profileID], references: [id], onDelete: Cascade)

  serverID String
  server   Server @relation(fields: [serverID], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileID])
  @@index([serverID])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

// 1 server have many channels and 1 channel have many members
model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileID String
  profile   Profile @relation(fields: [profileID], references: [id], onDelete: Cascade)

  serverID String
  server   Server @relation(fields: [serverID], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileID])
  @@index([serverID])
}
